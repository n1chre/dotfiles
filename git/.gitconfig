[alias]
	aliases = !"git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'"
	#############
	assume   = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed  = !"git ls-files -v | grep ^h | cut -c 3-"
	#############
	a = add --all
	ai = add --interactive
	#############
	c = commit
	ca = !git add -A && git commit -av
	cam = !git ca -m
	camd = commit --amend
	#############
	d = diff
	#############
	get = !git pull --rebase && git submodule update --init --recursive
	#############
	ls = ls-files
	#############
	logbase = log --color --graph --date-order --date=local
    lg = !git logbase --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)\
%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
	ll = !git logbase --stat --pretty=format:\
'%C(red)%d %C(yellow)%B%n\
%C(ul)Hash:%C(reset) %C(magenta)%H%n\
%C(ul)Author:%C(reset) %C(bold blue)%an<%ae> %C(reset)%C(green)%ar%C(cyan)(%ad)%n'
	lp = !git ll --patch
	# list my commits only
	lm = !git ll --author $(git config user.email)
	# list my today commits
	lmd = !git lp --author $(git config user.email) --since yesterday
	#############
	m = merge
	ma = merge --abort
	mc = merge --continue
	ms = merge --skip
	#############
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive
	rbs = rebase --skip
	#############
	re = reset
	rh = reset HEAD
	reh = reset --hard
	rem = reset --mixed
	res = reset --soft
	rehh = reset --hard HEAD
	remh = reset --mixed HEAD
	resh = reset --soft HEAD
	#############
	s = status
	st = status
	ss = status --short --branch
	#############
	save = !git stash save
	pop = !git stash pop
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	#############
	undo = reset --hard
	uncommit = reset --soft HEAD^
	#############
	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	merge-pr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[color]
	branch = auto
	diff = auto
	interactive = auto
	pager = true
	status = auto
	ui = true
[color "diff-highlight"]
	newHighlight = green bold 52
	newNomal = green bold
	oldHighlight = red bold 52
	oldNormal = red bold
[color "diff"]
	frag = magenta bold
	new = green bold
	old = red bold
	whitespace = red reverse

[commit]
	gpgsign = true

[core]
	autocrlf = input
	editor = vim
	excludesfile = ~/.gitignore
	pager = diff-so-fancy | less --tabs=4 -RFX
	untrackedCache = true
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[credential]
	helper = osxkeychain

[diff]
	renames = copy
	tool = vimdiff

[merge]
	log = true
	tool = vim

[push]
	default = matching
	followTags = true

[user]
	name = Filip HreniÄ‡
	email = hrenic.filip@gmail.com
